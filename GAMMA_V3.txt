Elasticsearch The Foundation for Modern AI & Search

Building a Real Estate RAG Pipeline with Elasticsearch

---

Introduction to Elasticsearch

- Advanced Query Capabilities: Compound bool queries with must/should/filter clauses, geo-spatial searches including distance and polygon, aggregations with sub-aggregations, and scripted fields for dynamic computation at query time
- Scalable Architecture: Horizontally scalable, schema-free JSON document store with automatic sharding and replication across multiple nodes
- Real-time Analytics: Near real-time search and analytics with powerful aggregation framework for complex data analysis and business intelligence
- Developer-Friendly: RESTful APIs, client libraries for all major languages, and intuitive query DSL for rapid development and integration
- Enterprise Ready: Production-proven at scale with built-in security, monitoring, and management capabilities supporting millions of requests per second

---

The Elastic Search AI Platform

- Unlocking Next-Generation Search: Enabling conversational real estate search with natural language understanding and intelligent property discovery
- Foundation for AI-Powered Experiences: Elasticsearch natively supports vector embeddings through dense_vector fields, enabling semantic search capabilities that understand intent beyond keywords
- Generative AI Foundation: Native vector search with k-NN, hybrid retrieval for RAG pipelines, and semantic understanding through dense embeddings
- Natural Language Understanding: Transform keyword matching into intent-based search where customers find comfortable running shoes for marathons regardless of exact terminology
- Vector Database at Scale: HNSW graphs deliver sub-50ms k-nearest neighbor searches across millions of products with minimal resource overhead
- Elasticsearch Relevance Engine: Suite of development tools combining BM25, learned sparse encoders, and dense vectors for superior search relevance

---

Beyond Search The Modern Elasticsearch Platform

- Observability Platform: Centralized logging, distributed tracing, metrics aggregation, and real-time alerting for modern cloud-native applications
- Security Operations: SIEM capabilities, threat detection, forensic investigation, and compliance reporting with machine learning anomaly detection
- Unified Data Platform: Single platform for structured and unstructured data, time-series analytics, and geographic information systems
- AI/ML Integration: Built-in machine learning, natural language processing, and seamless integration with LLMs for intelligent applications

---

Project Overview Real Estate RAG System

- Primary Goal: Create a high-quality RAG pipeline that ingests synthetic property and neighborhood data alongside real Wikipedia content for AI-powered property discovery
- Data Sources: Synthetic properties with rich attributes and 10-year price history, synthetic neighborhoods with demographics and trends, scraped Wikipedia articles for real-world context, and geographic boundaries
- Advanced Search: Rich property listing search by neighborhood characteristics, semantic understanding of natural language queries, geographic radius and polygon searches, and historical price trend analysis
- AI Integration: Dense embeddings for semantic understanding, natural language query interpretation, hybrid search combining text and vectors, and context retrieval for LLM augmentation
- Business Value: Demonstrates production RAG architecture with synthetic data, enables complex multi-criteria property discovery, showcases Elasticsearch versatility for real estate applications, and scalable to millions of listings

---

Data Processing Pipeline Flow

- Index Preparation: Creates four core indices for properties, neighborhoods, wikipedia, and relationships with custom mappings for text, dense vectors, and geo-points using predefined templates
- Wikipedia Summarization: Articles are first summarized using a Micro AI Agent with DSPy for relevance scoring and content extraction
- Medallion Architecture: Pipeline loads and processes data using Bronze-Silver-Gold medallion architecture for reliable ETL operations and data quality assurance

---

Embedding Generation

- Property Embeddings: Concatenates key property attributes into a single text string for embedding generation capturing semantic meaning
- Neighborhood Embeddings: Combines neighborhood features to create rich semantic representation for similarity searches
- Wikipedia Embeddings: Uses DSPy-generated long summary to create embedding text optimized for contextual retrieval
- Pluggable Provider Architecture: Supports multiple embedding providers including Voyage AI, OpenAI, Gemini, and local Ollama models

---

Bulk Indexing with Elasticsearch

- Streaming Architecture: DuckDB streams results in configurable batches to Elasticsearch for efficient memory management
- Bulk Action Generation: Each document converted to bulk action structured for Elasticsearch bulk API format with validation
- Performance Optimization: Sequential batch processing with configurable batch sizes and index configured with zero replicas during loading to reduce write overhead

---

Index Templates with Embeddings

- Dense Vector Configuration: Properties template defines dense_vector field for storing embeddings with 1024 dimensions
- Similarity Metrics: Configured with cosine similarity for accurate semantic matching across property descriptions
- HNSW Algorithm: Enables semantic similarity search using k-NN with Hierarchical Navigable Small World graphs
- Vector Storage: Optimized field mapping for efficient storage and retrieval of high-dimensional embeddings

---

Vector Search k-NN

- Semantic Understanding: Find properties based on meaning rather than exact keywords using dense embeddings
- Voyage AI Embeddings: Capture semantic meaning for intent-based search across property descriptions and features
- Quality Results: Configures 100 candidates to ensure optimal result selection while maintaining performance
- Contextual Matching: Discovers cozy family homes without requiring exact phrase matches in property listings

---

Hybrid Search RRF

- Reciprocal Rank Fusion: Merges keyword precision with semantic understanding delivering superior search results
- Dual Retrieval Strategy: Combines BM25 for exact matches with vector similarity for conceptual relevance
- Optimized Ranking: RRF formula combines scores from multiple retrievers using configurable rank constants
- Score Normalization: Each retriever produces ranked results that are combined using reciprocal rank formula for balanced relevance

---

Geographic Search

- Location-Based Discovery: Geo-distance queries enable radius searches around points of interest for property discovery
- Distance Calculations: Supports multiple distance units including kilometers, miles, and meters with precise accuracy
- Coordinate Searches: Enables radius searches from any latitude and longitude coordinate for flexible location queries
- Query Combination: Seamlessly combines with other query types for filtering and boosting location-relevant results

---

Natural Language Query Processing

- DSPy Framework: Programmatic LLM prompt construction with Python for declarative AI system building
- Location Extraction: Identifies cities, neighborhoods, and regions from natural language using Chain-of-Thought reasoning
- Query Cleaning: Removes location terms while preserving property features for accurate semantic matching
- Smart Filtering: Builds Elasticsearch filters from extracted locations with confidence scoring
- Type-Safe Signatures: DSPy provides structured input-output contracts for predictable AI behavior

---

MCP Service for Agentic Elasticsearch Retrieval

- Foundation on Search Services: Built on top of Search Service to encapsulate Elasticsearch operations with clean abstractions
- Natural Language Interface: Exposes semantic search for conversational queries like finding modern homes near parks
- Tool Registry Pattern: Dynamically registers search tools for AI agents to understand available operations
- Standardized Protocol: MCP server transforms Elasticsearch RAG pipeline into AI-accessible service layer

---

Semantic Search Agent with Dynamic Tool Discovery

- Dynamic Tool Discovery: Connects MCP Client to MCP servers at runtime to leverage search services via tool calling
- React Pattern: Explicit thought-action-observation loop that reasons about needed information and iteratively refines results
- Extract Agent Synthesis: Reviews complete history of thoughts and observations to synthesize coherent property listings
- Adaptive Reasoning: Transforms natural language queries into orchestrated tool executions while adapting to available capabilities

---

Price Distribution Analytics

- Market Analysis: Histogram aggregations reveal price distributions and market trends across property segments
- Nested Metrics: Provides deeper insights into property characteristics by price range for market understanding
- Interval Configuration: Analyzes price distribution in configurable intervals for flexible market segmentation
- Square Footage Correlation: Calculates average square footage per price range to identify value propositions

---

Property Type Analytics

- Statistical Analysis: Terms aggregations with nested statistics provide comprehensive market analysis by category
- Pricing Patterns: Reveals pricing trends across different property types including houses, condos, and townhomes
- Volatility Metrics: Includes standard deviation calculations for understanding price volatility by property type
- Comparative Analysis: Enables side-by-side comparison of count, min, max, average, and sum across categories

---

Nested Aggregations

- Multi-Dimensional Analytics: Multi-level aggregations provide drill-down analytics for complex market analysis
- Neighborhood Statistics: Groups properties by neighborhood and calculates comprehensive price statistics per group
- Unlimited Depth: Supports unlimited nesting levels for sophisticated analytical queries
- Reporting Capabilities: Enables complex market reports with multiple dimensions and metrics

---

Elasticsearch Inference API

- Unified Interface: Open Inference API provides unified interface for calling external ML and AI services
- Auto-Scaling Endpoints: Inference endpoints with adaptive allocations scaling from zero to N based on demand
- Multiple Task Types: Supports text embedding, sparse embedding, rerank, and NER through consistent API
- Built-in Models: Preconfigured endpoints like multilingual-e5-small ready for immediate use

---

Named Entity Recognition NER

- Entity Classification: Identifies and classifies entities into organization, person, location, and miscellaneous categories using transformer models
- DistilBERT Model: Small encoder model fine-tuned for NER tasks balancing performance and efficiency
- Metadata Extraction: Extracts entities from Wikipedia articles to enrich search with structured metadata
- Structured Output: Provides entity positions, confidence scores, and normalized names in dedicated fields
- Production Benefits: Enables entity-based filtering, faceted search, relationship discovery, and automated categorization

---

Wikipedia NER Processing Flow

- Model Deployment: Install DistilBERT via Eland Docker and deploy to ML nodes with adaptive scaling
- Inference Pipeline: Process documents through NER model and extract entities with Painless scripting
- Entity Storage: Dedicated keyword fields for fast aggregations including organizations, locations, and persons
- Search Benefits: Simple keyword searches for entity-based queries instead of complex semantic calculations

---

Faceted Search

- Dynamic Filtering: Global aggregations with post_filter enable faceted navigation with real-time counts
- Count Preservation: Post-filter preserves aggregation counts while applying user-selected filters
- Available Options: Global scope shows all available filter options regardless of current selections
- UI Generation: Enables dynamic filter interface generation based on actual data distribution

---

Multi-Index Federation

- Unified Search: Simultaneous searching across properties, neighborhoods, and Wikipedia indices in single query
- Heterogeneous Data: Provides comprehensive results from diverse data sources with unified relevance scoring
- Client Simplification: Reduces client-side complexity by handling multi-index queries at the Elasticsearch level
- Cross-Index Relevance: Maintains consistent scoring across different content types for meaningful result ranking

---

Index Boosting

- Weighted Scoring: Index-specific boosting ensures appropriate weighting when searching across content types
- Priority Configuration: Properties receive 50% boost for direct relevance to user intent
- Contextual Weighting: Neighborhoods get 20% boost for area context while Wikipedia provides supporting information
- Consistent Results: Ensures property listings appear prominently while maintaining comprehensive search coverage

---

Advanced Source Filtering

- Selective Retrieval: Includes and excludes patterns provide fine-grained control over returned fields
- Bandwidth Optimization: Excludes large embedding vectors to optimize network transfer and parsing overhead
- Display Fields: Returns only fields needed for display while maintaining query performance
- Pattern Selection: Supports wildcard patterns for flexible field inclusion and exclusion rules

---

Multi-Field Queries with Custom Analyzers

- Domain-Specific Processing: Custom analyzers optimize search for different data types with specialized tokenization
- Address Analyzer: ASCII folding for international addresses ensuring consistent matching across character sets
- Property Analyzer: Snowball stemming for descriptions to match variations of property feature terms
- Feature Analyzer: Keyword tokenization for amenities ensuring exact matching of property features

---

Business Impact & Conclusions

- Enhanced User Experience: Natural language property search reducing friction, contextual understanding of user intent and preferences, and personalized recommendations through similarity networks
- Operational Excellence: Automated data pipeline with quality assurance, scalable architecture handling millions of listings, and real-time updates without system downtime
- Competitive Advantage: Semantic search understanding beyond keywords, Wikipedia enrichment providing contextual insights, and multi-modal search combining best of all approaches
- Technical Innovation: Production-ready RAG pipeline architecture, hybrid search optimizing precision and recall, and extensible platform for future AI capabilities
- Future Ready: Foundation for conversational AI assistants, integration point for large language models, and platform for advanced analytics and market intelligence

---

Thank You

Questions & Discussion

Key Takeaways:
- Elasticsearch extends far beyond search to power AI, observability, and security workloads
- The medallion architecture ensures high-quality data through progressive refinement
- Hybrid search combining text and vectors delivers superior relevance
- Pre-computed relationships enable graph-like traversals at scale
- Production-ready platform for building sophisticated RAG applications

Resources:
- Project Repository on GitHub for complete implementation
- Elasticsearch Documentation at elastic.co/docs
- Demo Queries available in demo_queries directory

Building the future of intelligent search with Elasticsearch