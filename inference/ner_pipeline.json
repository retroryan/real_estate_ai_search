{
  "description": "Extract named entities from Wikipedia articles",
  "processors": [
    {
      "inference": {
        "model_id": "elastic__distilbert-base-uncased-finetuned-conll03-english",
        "target_field": "ml.inference",
        "field_map": {
          "full_content": "text_field"
        },
        "inference_config": {
          "ner": {
            "results_field": "entities",
            "tokenization": {
              "bert": {
                "truncate": "first",
                "max_sequence_length": 512
              }
            }
          }
        }
      }
    },
    {
      "script": {
        "lang": "painless",
        "source": [
          "if (ctx.ml?.inference?.entities != null) {",
          "    ctx.ner_entities = ctx.ml.inference.entities;",
          "    ",
          "    // Extract entities by type",
          "    def organizations = [];",
          "    def locations = [];",
          "    def persons = [];",
          "    def misc = [];",
          "    ",
          "    for (entity in ctx.ml.inference.entities) {",
          "        String entityText = entity.entity;",
          "        String className = entity.class_name;",
          "        ",
          "        if (className == 'ORG') {",
          "            if (!organizations.contains(entityText)) {",
          "                organizations.add(entityText);",
          "            }",
          "        } else if (className == 'LOC') {",
          "            if (!locations.contains(entityText)) {",
          "                locations.add(entityText);",
          "            }",
          "        } else if (className == 'PER') {",
          "            if (!persons.contains(entityText)) {",
          "                persons.add(entityText);",
          "            }",
          "        } else if (className == 'MISC') {",
          "            if (!misc.contains(entityText)) {",
          "                misc.add(entityText);",
          "            }",
          "        }",
          "    }",
          "    ",
          "    ctx.ner_organizations = organizations;",
          "    ctx.ner_locations = locations;",
          "    ctx.ner_persons = persons;",
          "    ctx.ner_misc = misc;",
          "    ctx.ner_processed = true;",
          "    ctx.ner_processed_at = new Date();",
          "    ctx.ner_model_id = 'elastic__distilbert-base-uncased-finetuned-conll03-english';",
          "}"
        ]
      }
    },
    {
      "remove": {
        "field": "ml",
        "ignore_failure": true
      }
    }
  ],
  "on_failure": [
    {
      "set": {
        "field": "ner_error",
        "value": "{{_ingest.on_failure_message}}"
      }
    },
    {
      "set": {
        "field": "ner_processed",
        "value": false
      }
    }
  ]
}