[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "data_pipeline"
version = "2.0.0"
description = "Spark-based data processing pipeline for Property Finder"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Property Finder Team"},
]
keywords = ["property", "real-estate", "spark", "pipeline", "embeddings", "graph"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Shared packages (assumed to be installed separately)
    "property_finder_models",
    "api_client",
    
    # Core dependencies
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "typing-extensions>=4.5.0",
    
    # Spark dependencies
    # Using 3.5.3 for Neo4j connector compatibility (latest connector supports up to Spark 3.5)
    "pyspark==3.5.3",
    
    # Database and storage
    "chromadb>=0.4.0",
    "neo4j>=5.0.0",
    "elasticsearch>=8.0.0",
    
    # Embedding providers
    "voyageai>=0.2.0",
    "google-generativeai>=0.3.0",
    "ollama>=0.1.0",
    
    # Data processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "pyarrow>=10.0.0",
    
    # Utilities
    "pyyaml>=6.0",
    "rich>=13.0",
    "tqdm>=4.65.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "ipython>=8.0.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]

[project.scripts]
data-pipeline = "data_pipeline.__main__:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["data_pipeline*"]
exclude = ["tests*", "integration_tests*", "*.egg-info"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.json", "**/*.yaml", "**/*.json"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["."]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
]
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused

[tool.ruff.isort]
known-first-party = ["data_pipeline"]